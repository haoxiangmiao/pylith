[pylithapp]
# Shear (S) wave via prescribed slip on a fault with absorbing boundaries.
#
#  y
#  ^
#  |
#   --> x
#
# Ux(x,y)=0
#
#           ------------------------------------
#           |                 |                |
# Absorbing |               | | ^              | Absorbing
# boundary  |               v | |              | boundary
#           |                 |                |
#           ------------------------------------
#
# Absobring boundaries: boundary_xpos, boundary_xpos
#
# Dirichlet boundary condition: domain: Uy(x,y) = 0, Vy(x,y) = 0

[pylithapp]
# File with version information and parameters (including defaults).
#
# You can view this file using the pylith_parameters application or
# online at https://geodynamics.github.io/pylith_parameters/.
dump_parameters.filename = output/step04_swave_prescribedslip-parameters.json
problem.progress_monitor.filename = output/step04_swave_prescribedslip-progress.txt

# Set the name of the problem that will be used to construct the
# output filenames. The default directory for output is 'output'.
problem.defaults.name = step04_swave_prescribedslip

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.problem]
# For a dynamic simulation with a fault, we have three solution
# fields: (1) displacement, (2) velocity, and (3) Lagrange
# multiplier. We use a predefined containter to create a solution
# field with these three subfields.
solution = pylith.problems.SolnDispVelLagrange

[pylithapp.problem.solution.subfields]
displacement.basis_order = 1
velocity.basis_order = 1
lagrange_fault.basis_order = 1

[pylithapp.problem]
solution_observers = [domain]

[pylithapp.problem.solution_observers.domain]
data_fields = [displacement, velocity]

# ----------------------------------------------------------------------
# fault
# ----------------------------------------------------------------------
[pylithapp.problem]
interfaces = [fault]

[pylithapp.problem.interfaces.fault]
# The label corresponds to the nodeset we created in CUBIT/Trelis for the fault.
label = fault

# For the fault, we need to specify an id associated with the cohesive cells that is
# different from any of the ids for the materials.
id = 10
observers.observer.data_fields = [slip]

eq_ruptures.rupture = pylith.faults.KinSrcBrune

[pylithapp.problem.interfaces.fault.eq_ruptures.rupture]
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Fault rupture auxiliary field spatial database
db_auxiliary_field.values = [initiation_time, final_slip_left_lateral, final_slip_opening, rise_time]
db_auxiliary_field.data = [0.0*s, 2.0*m, 0.0*m, 2.0*s]


# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
# We have one Neumann BC, one Dirichlet BC, and one absorbing boundary.
bc = [bc_xneg, bc_xpos, bc_domain]
bc.bc_xneg = pylith.bc.AbsorbingDampers
bc.bc_xpos = pylith.bc.AbsorbingDampers
bc.bc_domain = pylith.bc.DirichletTimeDependent


[pylithapp.problem.bc.bc_xneg]
label = boundary_xneg
field = velocity

db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Material properties for absorbing boundary on -x boundary
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.data = [2500*kg/m**3, 1.0*km/s, 1.732*km/s]

#auxiliary_subfields.density.basis_order = 0
#auxiliary_subfields.vs.basis_order = 0
#auxiliary_subfields.vp.basis_order = 0


[pylithapp.problem.bc.bc_xpos]
label = boundary_xpos
field = velocity

db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Material properties for absorbing boundary on +x boundary
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.data = [2500*kg/m**3, 1.0*km/s, 1.732*km/s]

#auxiliary_subfields.density.basis_order = 0
#auxiliary_subfields.vs.basis_order = 0
#auxiliary_subfields.vp.basis_order = 0


[pylithapp.problem.bc.bc_domain]
constrained_dof = [0]
label = domain_all
field = displacement

db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC on domain


# ----------------------------------------------------------------------
# PETSc
# ----------------------------------------------------------------------
[pylithapp.petsc]
ts_type = arkimex
arkimex.type = 3
ts_adapt_dt_max = 0.1


# End of file
